<?php
/**
 * Copyright Â© 2015 Magento. All rights reserved.
 * See COPYING.txt for license details.
 */
namespace Ibnab\ImportNewsletter\Model\Import\Validator;

use Ibnab\ImportNewsletter\Model\Import\Validator\Validator;
use Ibnab\ImportNewsletter\Model\Import\Validator\AbstractImportValidator;
use Ibnab\ImportNewsletter\Model\Import\NewsletterSubscribers\RowValidatorInterface;
use Ibnab\ImportNewsletter\Model\Import\NewsletterSubscribers;

class Store extends AbstractImportValidator implements RowValidatorInterface
{
    /**
     * @var \Magento\CatalogImportExport\Model\Import\Product\StoreResolver
     */
    protected $storeManager;


    /**
     * @param \Magento\CatalogImportExport\Model\Import\Product\StoreResolver $storeResolver
     * @param \Magento\Store\Model\Website $websiteModel
     */
    public function __construct(
        \Magento\Store\Model\StoreManagerInterface $storeManager
    ) {
        $this->storeManager = $storeManager;
    }

    /**
     * {@inheritdoc}
     */
    public function init($context)
    {
        
        return parent::init($context);
    }

    /**
     * Validate by website type
     *
     * @param array $value
     * @param string $websiteCode
     * @return bool
     */
    protected function isStoreValid($value)
    {
       
        if (isset($value) && !empty($value)) {
        foreach ($this->storeManager->getStores() as $store) {      
          if($value == $store->getId()){
            return true;
          }
        }
        }
        return false;
    }

    /**
     * Validate value
     *
     * @param mixed $value
     * @return bool
     */
    public function isValid($value)
    {
        
        $this->_clearMessages();
        $valid = true;
        if (isset($value[NewsletterSubscribers::STORE_ID]) && !empty($value[NewsletterSubscribers::STORE_ID])) {
            $valid = $this->isStoreValid($value[NewsletterSubscribers::STORE_ID]);
        }
        else
        {
         return true;
        }
        if (!$valid) {
            $this->_addMessages([self::ERROR_INVALID_STORE]);
        }
        return $valid;
    }
}
